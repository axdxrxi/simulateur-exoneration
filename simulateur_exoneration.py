import streamlit as st
from fpdf import FPDF

st.set_page_config(page_title="Simulateur d'exon√©ration", layout="centered")

st.title("Simulateur d'exon√©ration d‚Äôombri√®res photovolta√Øques (CNA)")
st.markdown("""
Ce simulateur permet d'√©valuer si un projet d‚Äôombri√®re peut √™tre exon√©r√© pour **non-viabilit√© √©conomique** 
(selon la loi APER). Il calcule automatiquement le **Co√ªt Net Actualis√© (CNA)** et le compare au **seuil d‚Äôexon√©ration**.
""")

st.header("üî¢ Param√®tres √† renseigner")

# Nouveau champ texte pour nom du site
nom_site = st.text_input("Nom du site", value="")

# Inputs avec annotations et cases √† cocher
checkbox_states = []

def champ_avec_checkbox(label, value):
    col1, col2 = st.columns([3, 1])
    with col1:
        val = st.number_input(label, value=value)
    with col2:
        checked = st.checkbox("Donn√©e v√©rifi√©e", key=label)
    checkbox_states.append(checked)
    return val

def curseur_avec_checkbox(label, min_val, max_val, value, aide):
    col1, col2 = st.columns([3, 1])
    with col1:
        val = st.slider(label, min_val, max_val, value)
        st.caption(aide)
    with col2:
        checked = st.checkbox("Donn√©e v√©rifi√©e", key=label)
    checkbox_states.append(checked)
    return val

surface_parking = champ_avec_checkbox("Surface du parking (m¬≤)", 3000.0)
surface_ombriere = champ_avec_checkbox("Surface √† couvrir par l‚Äôombri√®re (m¬≤)", 2000.0)
valeur_parking = champ_avec_checkbox("Valeur v√©nale du parking (‚Ç¨)", 300000.0)
cout_initial = champ_avec_checkbox("Co√ªt initial (CAPEX) du projet (‚Ç¨)", 420000.0)
duree = curseur_avec_checkbox("Dur√©e d‚Äô√©tude (ans)", 0, 30, 20, "Dur√©e standard recommand√©e : 20 ans")
taux_actualisation = curseur_avec_checkbox("Taux d‚Äôactualisation (%)", 0.0, 10.0, 5.0, "Taux recommand√© : entre 4 % et 6 %")
seuil_exoneration_pourcent = curseur_avec_checkbox("Seuil d‚Äôexon√©ration (%)", 0.0, 30.0, 10.0, "Seuil l√©gal selon l'article R*111-24 du code de l'urbanisme")
cout_maintenance_annuel = champ_avec_checkbox("Co√ªts de maintenance annuels (‚Ç¨)", 3000.0)
cout_recyclage = champ_avec_checkbox("Co√ªt total de d√©mant√®lement/recyclage (‚Ç¨)", 20000.0)
production_annuelle = champ_avec_checkbox("Production annuelle estim√©e (kWh)", 180000.0)
prix_kwh = champ_avec_checkbox("Prix de vente ou autoconsommation du kWh (‚Ç¨)", 0.08)
aides_total = champ_avec_checkbox("Montant total des aides ou subventions (‚Ç¨)", 0.0)

if not nom_site.strip():
    st.warning("Veuillez renseigner le nom du site pour continuer.")
elif not all(checkbox_states):
    st.warning("Veuillez cocher toutes les cases 'Donn√©e v√©rifi√©e' pour afficher les r√©sultats.")
else:
    # Calculs
    r = taux_actualisation / 100
    revenus_actualises = sum((production_annuelle * prix_kwh) / ((1 + r) ** t) for t in range(1, duree + 1))
    revenus_actualises += aides_total

    maintenance_actualisee = sum(cout_maintenance_annuel / ((1 + r) ** t) for t in range(1, duree + 1))
    couts_actualises = cout_initial + maintenance_actualisee + (cout_recyclage / ((1 + r) ** duree))

    cna = couts_actualises - revenus_actualises
    seuil_exon = valeur_parking * (seuil_exoneration_pourcent / 100)
    exonere = "‚úÖ OUI" if cna > seuil_exon else "‚ùå NON"

    st.header("üìä R√©sultats")
    st.metric("Revenus actualis√©s (‚Ç¨)", f"{revenus_actualises:,.2f}")
    st.metric("Co√ªts actualis√©s (‚Ç¨)", f"{couts_actualises:,.2f}")
    st.metric("Co√ªt Net Actualis√© (CNA) (‚Ç¨)", f"{cna:,.2f}")
    st.metric(f"Seuil d‚Äôexon√©ration ({seuil_exoneration_pourcent:.0f}%) (‚Ç¨)", f"{seuil_exon:,.2f}")
    st.metric("Exon√©ration possible ?", exonere)

    st.markdown("üí° **Conseil :** Si le CNA d√©passe le seuil d‚Äôexon√©ration, vous pouvez inclure ces r√©sultats dans votre dossier pr√©fectoral pour justifier l‚Äôexemption.")

    # PDF Export
    def generate_pdf(donnees, resultats, nom_site_pdf):
        def clean(text):
            return str(text).replace("‚Äô", "'").replace("‚Äì", "-").replace("‚Ç¨", "EUR").replace("‚úÖ", "OUI").replace("‚ùå", "NON").replace("Œ£", "Somme")

        donnees_clean = {clean(k): clean(v) for k, v in donnees.items()}
        resultats_clean = {clean(k): clean(v) for k, v in resultats.items()}

        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)

        pdf.add_page()
        pdf.set_font("Arial", 'B', 16)
        pdf.cell(0, 10, "Synthese du projet - Simulateur d'exoneration", ln=True, align='C')
        pdf.ln(8)
        pdf.set_font("Arial", 'I', 14)
        pdf.cell(0, 10, f"Site : {nom_site_pdf}", ln=True, align='C')
        pdf.ln(10)

        pdf.set_font("Arial", 'B', 12)
        pdf.cell(0, 10, "1. Donn√©es renseign√©es :", ln=True)
        pdf.set_font("Arial", '', 11)
        for k, v in donnees_clean.items():
            pdf.cell(0, 8, f"- {k} : {v}", ln=True)

        pdf.ln(5)
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(0, 10, "2. R√©sultats calcul√©s :", ln=True)
        pdf.set_font("Arial", '', 11)
        for k, v in resultats_clean.items():
            pdf.cell(0, 8, f"- {k} : {v}", ln=True)

        pdf.add_page()
        pdf.set_font("Arial", 'B', 14)
        pdf.cell(0, 10, "M√©thodologie de calcul", ln=True, align='C')
        pdf.ln(8)
        pdf.set_font("Arial", '', 11)
        pdf.multi_cell(0, 8, clean("""
Cette page d√©taille les formules utilis√©es dans le calcul du Cout Net Actualis√© (CNA) et les crit√®res d'exoneration.

1. Revenus actualis√©s = Somme sur la dur√©e :
   (Production annuelle √ó Prix du kWh) / (1 + taux)^t + aides

2. Co√ªts actualis√©s = Co√ªt initial + Somme des maintenances actualis√©es + Recyclage actualis√© :
   CAPEX + Somme (maintenance / (1 + taux)^t) + (recyclage / (1 + taux)^dur√©e)

3. CNA = Co√ªts actualis√©s - Revenus actualis√©s

4. Seuil d'exoneration = Valeur venale du parking √ó seuil %

5. Exoneration accord√©e si CNA > Seuil

Sources l√©gales : Loi APER, d√©cret d'application sur les ombri√®res photovolta√Øques, articles du Code de l'urbanisme (R111-24 et suivants).
"""))

        output_path = "simulation_exoneration.pdf"
        pdf.output(output_path)
        return output_path

    donnees_pdf = {
        "Surface du parking (m¬≤)": surface_parking,
        "Surface de l‚Äôombri√®re (m¬≤)": surface_ombriere,
        "Valeur v√©nale du parking (‚Ç¨)": valeur_parking,
        "Co√ªt initial (‚Ç¨)": cout_initial,
        "Dur√©e d‚Äô√©tude (ans)": duree,
        "Taux d‚Äôactualisation (%)": taux_actualisation,
        "Seuil d‚Äôexon√©ration (%)": seuil_exoneration_pourcent,
        "Maintenance annuelle (‚Ç¨)": cout_maintenance_annuel,
        "Co√ªt recyclage (‚Ç¨)": cout_recyclage,
        "Production annuelle (kWh)": production_annuelle,
        "Prix kWh (‚Ç¨)": prix_kwh,
        "Montant des aides (‚Ç¨)": aides_total
    }

    resultats_pdf = {
        "Revenus actualis√©s (‚Ç¨)": f"{revenus_actualises:,.2f}",
        "Co√ªts actualis√©s (‚Ç¨)": f"{couts_actualises:,.2f}",
        "CNA (‚Ç¨)": f"{cna:,.2f}",
        f"Seuil d‚Äôexon√©ration ({seuil_exoneration_pourcent:.0f}%) (‚Ç¨)": f"{seuil_exon:,.2f}",
        "Exon√©ration possible ?": exonere
    }

    chemin_pdf = generate_pdf(donnees_pdf, resultats_pdf, nom_site)
    with open(chemin_pdf, "rb") as file:
        st.download_button(
            label="üì• T√©l√©charger le PDF",
            data=file,
            file_name="simulation_exoneration.pdf",
            mime="application/pdf"
        )
